// <auto-generated />
using System;
using AnimoWeb.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AnimoWeb.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201223150652_Initial4")]
    partial class Initial4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Model.Shared.Firmas", b =>
                {
                    b.Property<int>("FirmaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("TEXT");

                    b.Property<int>("LandeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Logo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("Zip")
                        .HasColumnType("TEXT");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("INTEGER");

                    b.HasKey("FirmaId");

                    b.HasIndex("LandeId");

                    b.ToTable("Firmas");
                });

            modelBuilder.Entity("Model.Shared.Images", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ImageId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Model.Shared.Landes", b =>
                {
                    b.Property<int>("LandeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LandeFlag")
                        .HasColumnType("TEXT");

                    b.Property<string>("LandeName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LandeShort")
                        .HasColumnType("TEXT");

                    b.HasKey("LandeId");

                    b.ToTable("Landes");
                });

            modelBuilder.Entity("Model.Shared.Logos", b =>
                {
                    b.Property<int>("LogoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LogoFile")
                        .HasColumnType("TEXT");

                    b.Property<string>("LogoName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LogoId");

                    b.ToTable("Logos");
                });

            modelBuilder.Entity("Model.Shared.Photos", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhotoName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("PhotoId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Model.Shared.ProjectImages", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectId", "ImageId");

                    b.HasIndex("ImageId");

                    b.ToTable("ProjectImages");
                });

            modelBuilder.Entity("Model.Shared.ProjectTecnos", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TecnoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectId", "TecnoId");

                    b.HasIndex("TecnoId");

                    b.ToTable("ProjectTecnos");
                });

            modelBuilder.Entity("Model.Shared.Projects", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Dlu")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Doc")
                        .HasColumnType("TEXT");

                    b.Property<string>("KundeName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("VideoUrl1")
                        .HasColumnType("TEXT");

                    b.Property<string>("VideoUrl2")
                        .HasColumnType("TEXT");

                    b.Property<bool>("isActive")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Model.Shared.Roles", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Model.Shared.Tecnos", b =>
                {
                    b.Property<int>("TecnoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TecnoName")
                        .HasColumnType("TEXT");

                    b.HasKey("TecnoId");

                    b.ToTable("Tecnos");
                });

            modelBuilder.Entity("Model.Shared.UserPhotos", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PhotoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "PhotoId");

                    b.HasIndex("PhotoId");

                    b.ToTable("UserPhotos");
                });

            modelBuilder.Entity("Model.Shared.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Doc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Dol")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FirmaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JobPosition")
                        .HasColumnType("TEXT");

                    b.Property<string>("JobPositionDescription")
                        .HasColumnType("TEXT");

                    b.Property<int>("LandeId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Telephone")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.Property<bool>("isBanned")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId");

                    b.HasIndex("FirmaId");

                    b.HasIndex("LandeId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Model.Shared.Firmas", b =>
                {
                    b.HasOne("Model.Shared.Landes", "Lande")
                        .WithMany()
                        .HasForeignKey("LandeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lande");
                });

            modelBuilder.Entity("Model.Shared.ProjectImages", b =>
                {
                    b.HasOne("Model.Shared.Images", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Shared.Projects", "Project")
                        .WithMany("ProjectImages")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Model.Shared.ProjectTecnos", b =>
                {
                    b.HasOne("Model.Shared.Projects", "Project")
                        .WithMany("ProjectTecnos")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Shared.Tecnos", "Tecno")
                        .WithMany()
                        .HasForeignKey("TecnoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Tecno");
                });

            modelBuilder.Entity("Model.Shared.UserPhotos", b =>
                {
                    b.HasOne("Model.Shared.Photos", "Photo")
                        .WithMany("UserPhotos")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Shared.Users", "User")
                        .WithMany("UserPhotos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Photo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Shared.Users", b =>
                {
                    b.HasOne("Model.Shared.Firmas", "Firma")
                        .WithMany()
                        .HasForeignKey("FirmaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Shared.Landes", "Lande")
                        .WithMany()
                        .HasForeignKey("LandeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Shared.Roles", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Firma");

                    b.Navigation("Lande");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Model.Shared.Photos", b =>
                {
                    b.Navigation("UserPhotos");
                });

            modelBuilder.Entity("Model.Shared.Projects", b =>
                {
                    b.Navigation("ProjectImages");

                    b.Navigation("ProjectTecnos");
                });

            modelBuilder.Entity("Model.Shared.Users", b =>
                {
                    b.Navigation("UserPhotos");
                });
#pragma warning restore 612, 618
        }
    }
}
