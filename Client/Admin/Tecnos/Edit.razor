@page "/admin/tecnos/edit/{TecnoId:int}"
@page "/admin/tecnos/edit/{TecnoId:int}/{TecnoName}"
@using Model.Shared
@inject IRepository repo
@inject IMostrarMensajes mostrar
@inject NavigationManager nm

<div id="headerSection">
    <div class="grid50l-- vtop">
        <h5>Technology Edition</h5>
        <hr class="hr4" />
        <div class="hh-40 vtop">
            <p class="p12 colorDarkGrey">Edit your record here</p>
        </div>
    </div>

    <div class="grid50r-- vtop">
        <h5>Options</h5>
        <hr class="hr4inverted" />
        <div class="hh-40 vtop">
            <GoBack></GoBack>
        </div>
    </div>
</div>


@if (Tecno == null)
{
    <LoadingAsset/> 
}
else
{
    <div class="mt-25 grid100l--">
        <TecnoForm Tecno="Tecno" OnValidSubmit="HandleEdit" />
    </div>
}



@code {

    [Parameter] public int TecnoId { get; set; }
    [Parameter] public int TecnoName { get; set; }
    private Tecnos Tecno;


    protected async override Task OnInitializedAsync()
    {
        var httpResponse = await repo.Get<Tecnos>($"api/tecnos/{TecnoId}");

        if (httpResponse.Error)
        {
            if (httpResponse.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                nm.NavigateTo("admin/tecnos");
            }
            else
            {
                await mostrar.MostrarMensajeError(await httpResponse.GetBody());
            }
        }
        else
        {
            Tecno = httpResponse.Response;
        }

    }

    private async Task HandleEdit()
    {
        var httpResponse = await repo.Put("api/tecnos", Tecno);

        if (httpResponse.Error)
        {
            await mostrar.MostrarMensajeError(await httpResponse.GetBody()); 
        }
        else
        {
            nm.NavigateTo("admin/tecnos");
        }
    }

}
