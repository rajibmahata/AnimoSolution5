@page "/admin/configlocations/edit/{Id:int}"
@page "/admin/configlocations/edit/{Id:int}/{LocationReference}"
@using Model.Shared.Entities
@inject IRepository repo
@inject IMostrarMensajes mostrar
@inject NavigationManager nm

<div id="headerSection">
    <div class="grid50l-- vtop">
        <h5>Location Edition</h5>
        <hr class="hr4" />
        <div class="hh-40 vtop">
            <p class="p12 colorDarkGrey">Edit your record here</p>
        </div>
    </div>

    <div class="grid50r-- vtop">
        <h5>Options</h5>
        <hr class="hr4inverted" />
        <div class="hh-40 vtop">
            <GoBack></GoBack>
        </div>
    </div>
</div>


@if (paises.Count < 1)
{
    <LoadingAsset />
}
else
{
    <LocationForm globalLocation="globalLocation" OnValidSubmit="HandleEdit" paises="paises" />
}



@code {

    [Parameter] public int Id { get; set; }
    [Parameter] public string LocationReference { get; set; }
    private GlobalLocations globalLocation = new GlobalLocations();
    public List<Landes> paises = new List<Landes>();


    protected async override Task OnInitializedAsync()
    {
        await LoadCountries();

        var httpResponse = await repo.Get<GlobalLocations>($"api/globallocations/{Id}");

        if (httpResponse.Error)
        {
            if (httpResponse.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                nm.NavigateTo("admin");
            }
            else
            {
                await mostrar.MostrarMensajeError(await httpResponse.GetBody());
            }
        }
        else
        {
            globalLocation = httpResponse.Response;
        }

    }

    private async Task HandleEdit()
    {
        var httpResponse = await repo.Put("api/globallocations", globalLocation);

        if (httpResponse.Error)
        {
            await mostrar.MostrarMensajeError(await httpResponse.GetBody());
        }
        else
        {
            nm.NavigateTo("admin/configlocations");
        }
    }

    private async Task LoadCountries()
    {
        var httpResponse = await repo.Get<List<Landes>>("api/landes");
        paises = httpResponse.Response;
    }

}
