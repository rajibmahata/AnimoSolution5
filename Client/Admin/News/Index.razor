@page "/admin/news"
@inject NavigationManager nm
@inject IRepository repo
@inject IMostrarMensajes mostrar

<div id="headerSection">
    <div class="grid50l-- vtop">
        <h5>News</h5>
        <hr class="hr4" />
        <div class="hh-40 vtop">
            <p class="p12 colorDarkGrey">New to be posted in the Blog - News</p>
        </div>
    </div>

    <div class="grid50r-- vtop">
        <h5>Options</h5>
        <hr class="hr4inverted" />
        <div class="hh-40 vtop">
            <GoBack></GoBack>
            <a href="admin/bilboards" class="btn btn-secondary">Manage Anzeige</a> 
            <a href="admin/news/create" class="btn btn-primary">Create New</a>

        </div>
    </div>
</div>
<br />
<br />

@if (news == null )
{
    <LoadingAsset />
}
else
{
<div style="width: 100%; padding-left: 20%; padding-right: 20%; margin: auto;">
    <GenericList Listado="news">
        <HayRegistrosCompleto>

            @foreach (var item in news)
            {
                <div class="grid100l " style="background-color: #19415e; height:40px;">
                    <div class="grid50l-- mt-10">
                        <h6 class="colorWhite pl-5">@item.Title</h6>
                    </div>

                    <div class="grid50r-- mt-10">
                        <span class="p11 colorLightGrey">Created: @item.Doc | Updated on: @item.Dlu</span>
                    </div>
                </div>
                <div class="grid75l--">
                    <span class="pl-5">Author: <span class="pbold">@users.Where(x => x.UserId == item.UserId).Select(x => x.FullName).FirstOrDefault()</span></span>
                </div>
                <div class="grid25r--">
                    <a href="admin/news/edit/@item.NewsId" class="btn btn-success">Edit</a>
                    <a href="admin/news/addimages/@item.NewsId/@item.Title.Replace(" ","-")" class="btn btn-success">Manage Images</a>
                    <button @onclick="@(() => PreDelete(item.NewsId))" class="btn btn-danger">Delete</button>
                </div>
                <hr />
                <div class="grid100c">
                    <img src="@item.PosterImage" alt="" class="imgResponsive" />
                </div>
                <hr />
                <div class="grid100l mt-25">
                    <div class="grid75l-- vtop">
                        <MostrarMarkdown ContenidoMarkdown="@item.Body" />                
                    </div>
                    <div class="grid25c-- vtop" style="border-left: 1px solid #9c9c9c">
                        <span class="p12 pbold colorDarkGrey">Xtra Images</span><br />
                        <hr class="hr4" />
                        @foreach (var el in news)
                        {
                            var MyGraphId = el.NewsGraphs.Where(x => x.NewsId == item.NewsId).Select(x => x.GraphId).ToList(); 
                            for (int i = 0; i < MyGraphId.Count(); i++)
                            {
                                var imagen = Graphicos.Where(x => x.GraphId == MyGraphId[i]).Select(x => x.GraphUrl).FirstOrDefault();
                                <img src="@imagen" width="128" height="100" class="pl-5 pr-5" style="border-radius: 5px;"  />
                            }
                           
                        }
                    </div>
                </div>
                <h6>Extra info</h6>
                <hr />
                <div class="grid100c--">        
                    <span class="pbold p13 colorBlue">@item.Tags</span>
                </div>
                <hr />
                <div class="grid100l-- mt-5">
                    <span class="p11">External video</span><br />
                    <span>@item.VideoUrl</span>
                </div>
                <div class="grid100l-- mt-5">
                    <span class="p11">External Url Link</span><br />
                    <span>@item.LinkUrl</span>
                </div>
                <hr />
                <div class ="grid100l-- mt-5">
                    <span class="p11">Views</span><br />
                    @item.Clicks
                </div>
                <div class="mt-100"></div>

            }

        </HayRegistrosCompleto>
    </GenericList>
</div>
        
        <br />
        <br />

        @if (news.Count >= 1)
        {
            <Paginacion PaginaActual="paginaActual" PaginaSeleccionada="paginaSeleccionada" PaginasTotales="paginasTotales"></Paginacion>
        }

}
<Confirmation @ref="confirming" onConfirm="OkConfirm" onCancel="OnCancelConfirm">
    <div>Sure to delete this New ?</div>
</Confirmation>

@code {
    Confirmation confirming;

    public int NewsId; 

    private List<News> news { get; set; }
    private List<Users> users { get; set; }

    private List<NewsGraphs> newsGraphs { get; set; }

    private List<Graphs> Graphicos { get; set; }

    private int paginaActual = 1;
    private int paginasTotales;


    private async Task paginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await Load(pagina);
    }

    void PreDelete(int _NewsId) 
    {
        NewsId = _NewsId; 
        confirming.Mostrar();
    }

    protected async override Task OnInitializedAsync()
    {

        var respopnseGraphicos = await repo.Get<List<Graphs>>("api/graphs");
        Graphicos = respopnseGraphicos.Response;


        var responseUsers = await repo.Get<List<Users>>("api/users");
        users = responseUsers.Response;
        await Load();
    }

    private async Task Load(int pagina = 1)
    {
        var responseHttp = await repo.Get<List<News>>($"api/news?pagina={pagina}");

        if (!responseHttp.Error)
        {
            news = responseHttp.Response;
            var conteo = responseHttp.HttpResponseMessage.Headers.GetValues("conteo").FirstOrDefault();
            paginasTotales = int.Parse(responseHttp.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());
        }

    }


    private async Task DeleteRecord()
    {

        var httpResponse = await repo.Delete($"api/news/{NewsId}");

        if (httpResponse.Error)
        {
            var body = await httpResponse.GetBody();
            await mostrar.MostrarMensajeError(body);
        }
        else
        {
            StateHasChanged();
            await OnInitializedAsync();
        }
    }

    void OnCancelConfirm()
    {
        confirming.Ocultar();
    }

    async Task OkConfirm()
    {
        await DeleteRecord();
        confirming.Ocultar();
    }

}




