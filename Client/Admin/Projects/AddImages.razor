@page "/admin/projects/addimages/{ProjectId:int}"
@page "/admin/projects/addimages/{ProjectId:int}/{Name}"

@inject NavigationManager nm
@inject IRepository repo
@inject IMostrarMensajes mostrar
@using Model.Shared


<div id="headerSection">
    <div class="grid50l-- vtop">
        <h5 class="colorBlue">Projects Images Set</h5>
        <hr class="hr4" />
        <div class="hh-40 vtop">
            <p class="p12 colorDarkGrey">Lets add some Images to our Projects</p>
        </div>
    </div>

    <div class="grid50r-- vtop">
        <h5>Options</h5>
        <hr class="hr4inverted" />
        <div class="hh-40 vtop">
            <GoBack></GoBack>
        </div>
    </div>
</div>



@if (project == null)
{
    <text>Fatal error in project...</text>
    <LoadingAsset />
}
else
{
<div>
    <p class="p14 pbold">Project: @project.Name</p><span class="p12">Actual Images count: @cantidad</span><br />
    @if (cantidad < 1)
    {
        <p class="colorRed p12">Project has no images yet !</p>
    }
    else
    {
        <div class="gridderRow">
            <br />
            <h6>This are the current images</h6><br />
            @foreach (var item in projectImagesList)
            {
                <div class="grid20c">
                    <img src="@item.Image.ImageFile" class="img256" /><br />
                    <span class="p12 ">@item.Image.ImageName</span><br />
                    <span class="p11 ">Order: @item.Image.order</span><br />
                    <hr class="hr1" />
                    <button type="button" @onclick="@(() => DeleteRecord(item.ImageId))" class="btn btn-outline-primary">Delete</button>  
                </div>
            }

        </div>

    }
    <hr />
    <div class="mt-25">
        <h6>Adding new Images !</h6>
        <EditForm Model="model" OnValidSubmit="HandleCreate">
            <DataAnnotationsValidator />
            <div class="form-group">
                <div>
                    <InputImg Label="Select..." ImagenURL="@imageTemp" SelectedImage="SelectedImage" CssClass="img1280" />
                </div>
                <div>
                    <span>Name</span>
                    <InputText class="form-control " style="width: 150px;" @bind-Value="@imageName" />
                </div>
                <div style="width: 150px;">
                    <span>Position relevance</span>
                    <InputNumber class="form-control" @bind-Value="@order" />
                </div>

            </div>

            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

}



@code {
    [Parameter] public int ProjectId { get; set; }
    [Parameter] public string Name { get; set; }

    public Projects project = new Projects();
    public ViewProjectImagesDTO model = new ViewProjectImagesDTO();
    public ProjectImages projectImages = new ProjectImages();
    public List<ProjectImages> projectImagesList = new List<ProjectImages>();

    public Images image = new Images();
    public int cantidad = 0;
    public string imageName;
    public int order;
    private string imageTemp;



    protected async override Task OnInitializedAsync()
    {
        var httpResponse = await repo.Get<ViewProjectImagesDTO>($"api/projectimages/{ProjectId}");

        imageTemp = null;
        image.ImageFile = null;

        if (httpResponse.Error)
        {
            await mostrar.MostrarMensajeError(await httpResponse.GetBody());
        }
        else
        {
            projectImagesList = httpResponse.Response.ProjectImages;
            project = httpResponse.Response.Project;

            if (projectImagesList == null)
            {
                cantidad = 0;
            }
            else
            {
                projectImagesList = httpResponse.Response.ProjectImages;
                cantidad = projectImagesList.Count;
            }
        }

    }

    private void SelectedImage(string imageBase64)
    {
        imageTemp = imageBase64;
        image.ImageFile = null;
    }


    private async Task HandleCreate()
    {

        image.ImageName = imageName;
        image.ImageFile = imageTemp;
        image.order = order;

        //Primero posteamos la imagen
        var httpResponse = await repo.Post<Images,int>("api/images", image);
        if (httpResponse.Error)
        {
            var body = await httpResponse.GetBody();
            await mostrar.MostrarMensajeError(body);

        }
        else
        {
            //Segundo posteamos los id en la tabla de normalizacion
            projectImages.ProjectId = ProjectId;
            projectImages.ImageId = httpResponse.Response;

            var httpRes2 = await repo.Post($"api/projectimages", projectImages);
            if (httpRes2.Error)
            {
                var body = await httpResponse.GetBody();
                await mostrar.MostrarMensajeError(body);
            }
            else
            {
                StateHasChanged();
                image.ImageFile = null;
                imageTemp = null;
                imageName = "";
                order = 0;                

                nm.NavigateTo($"admin/projects");
            }

        }
    }

    private async Task DeleteRecord(int imageId)
    {
        var httpResponse = await repo.Delete($"api/images/{imageId}");

        if (httpResponse.Error)
        {
            var body = await httpResponse.GetBody();
            await mostrar.MostrarMensajeError(body);
        }
        else
        {
            // exito
            await DeleteProjectImagesReference(imageId);
            StateHasChanged();
            await OnInitializedAsync();
        }
    }

    private async Task DeleteProjectImagesReference(int imageId)
    {
        var httpResponse = await repo.Delete($"api/projectimages/{imageId}");

        if (httpResponse.Error)
        {
            var body = await httpResponse.GetBody();
            await mostrar.MostrarMensajeError(body);
        }
        else
        {
            // exito 

            //await OnInitializedAsync();
        }
    }


}
