@page "/admin/projects"
@attribute [Authorize(Roles = "Admin")]
@inject NavigationManager nm
@inject IRepository repo
@inject IMostrarMensajes mostrar



<div id="headerSection">
    <div class="grid50l-- vtop">
        <h5>Projects</h5>
        <hr class="hr4" />
        <div class="hh-40 vtop">
            <p class="p12 colorDarkGrey">Projects to be shown in web site.</p>
        </div>
    </div>

    <div class="grid50r-- vtop">
        <h5>Options</h5>
        <hr class="hr4inverted" />
        <div class="hh-40 vtop">
            <GoBack></GoBack>
            <a href="admin/projects/create" class="btn btn-primary">Create Record</a>

        </div>
    </div>
</div>

<div>
    <GenericList Listado="projects">
        <HayRegistrosCompleto>
            <div class="mr-50 ml-50">
                <div class="divTable greyGridTable">
                    <div class="divTableHeading ">
                        <div class="divTableRow ">
                            <div class="divTableHead grid20l--">Creation</div>
                            <div class="divTableHead grid20l--">Project name</div>
                            <div class="divTableHead grid20l--">Kunde</div>
                            <div class="divTableHead grid20l--">Poster</div>
                            <div class="divTableHead grid10c" style="background-color:black;">Actions</div>
                        </div>
                    </div>
                    <div class="divTableBody ">
                        @foreach (var item in projects)
                        {
                            <div class="divTableRow">
                                <div class="divTableCell grid20l--">@item.Doc.ToShortDateString()</div>
                                <div class="divTableCell grid20l--">@item.Name</div>
                                <div class="divTableCell grid20l--">@item.KundeName</div>
                                <div class="divTableCell grid20l--"><img src="@item.Poster" class="img128 imageFilter" /> </div>

                                <div class="divTableCell grid10c">
                                    <a href="admin/projects/edit/@item.ProjectId" class="btn btn-success">Edit General</a>
                                    <a href="admin/projects/addimages/@item.ProjectId/@item.Name" class="btn btn-success">Manage Images</a>
                                    <AuthorizeView Roles="Admin">
                                        <Authorized>
                                            <button type="button" @onclick="@(() => DeleteRecord(item.ProjectId))" class="btn btn-outline-primary">Delete</button>
                                        </Authorized>
                                        <NotAuthorized>
                                            <NotEnough />
                                        </NotAuthorized>
                                    </AuthorizeView>

                                </div>
                            </div>
                        }
                    </div>
                    <div class="divTableFoot tableFootStyle">
                    </div>
                </div>
            </div>
        </HayRegistrosCompleto>
    </GenericList>
</div>

<div class="grid100c mt-100">
    <h6>Projects in Vorarlberg</h6>
    <ProjectList Projects="inVorarlberg" />
</div>
<div class="grid100c mt-100">
    <h6>Projects in rest of Austria</h6>
    <ProjectList Projects="inRestAustria" />
</div>
<div class="grid100c mt-100">
    <h6>International Projects</h6>
    <ProjectList Projects="inInternational" />
</div>



@code {

    private List<Projects> projects { get; set; }

    private List<Projects> inVorarlberg { get; set; }
    private List<Projects> inRestAustria { get; set; }
    private List<Projects> inInternational { get; set; }
    private ViewHomeProjectsDTO model = new ViewHomeProjectsDTO();
    private string homeDTO;


    protected async override Task OnInitializedAsync()
    {

        var httpResponse = await repo.Get<List<Projects>>("api/projects");


        if (httpResponse.Error)
        {
            await mostrar.MostrarMensajeError(await httpResponse.GetBody());
        }
        else
        {
            projects = httpResponse.Response;
            await ContinueLoading();
        }

    }

    private async Task ContinueLoading()
    {
        var response = await repo.Get<ViewHomeProjectsDTO>($"api/DTOHomeProject");
        model = response.Response;

        inVorarlberg = model.ProjectsInVorarlberg;
        inRestAustria = model.ProjectsInRestAustria;
        inInternational = model.ProjectsInternational;

    }

    private async Task DeleteRecord(int ProjectId)
    {
        var httpResponse = await repo.Delete($"api/projects/{ProjectId}");

        if (httpResponse.Error)
        {
            var body = await httpResponse.GetBody();
            await mostrar.MostrarMensajeError(body);
        }
        else
        {
            // delete Project TECNOS
            //await DeleteProjectTecnosReference(ProjectId);
            // delete Project PROJECT IMAGES
            //await DeleteProjectImagesReference(ProjectId);
            StateHasChanged();
            await OnInitializedAsync();
        }
    }

    //private async Task DeleteProjectImagesReference(int ProjectId)
    //{
    //    var httpResponse = await repo.Delete($"api/projectimages/{ProjectId}");

    //    if (httpResponse.Error)
    //    {
    //        var body = await httpResponse.GetBody();
    //        await mostrar.MostrarMensajeError(body);
    //    }
    //    else
    //    {
    //        return;
    //    }
    //}

    //private async Task DeleteProjectTecnosReference(int ProjectId)
    //{
    //    var httpResponse = await repo.Delete($"api/projecttecnos/{ProjectId}");

    //    if (httpResponse.Error)
    //    {
    //        var body = await httpResponse.GetBody();
    //        await mostrar.MostrarMensajeError(body);
    //    }
    //    else
    //    {
    //        return;
    //    }
    //}
}




